package study.foo.mock;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import study.foo.user.domain.Address;
import study.foo.user.domain.User;
import study.foo.user.service.port.UserRepository;

public class FakeUserRepository implements UserRepository {

    // 소형 테스트의 경우 단일 스레드 실행으로 동기화 걱정 X
    private Long autoGeneratedId = 0L;
    private final List<User> data = new ArrayList<>();

    @Override
    public Optional<User> findById(long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream().filter(item -> item.getEmail().equals(email)).findAny();
    }

    @Override
    public User save(User user) {
        if(user.getId() == null || user.getId() == 0L)  {
            user = User.builder()
                    .id(autoGeneratedId++)
                    .email("test01@gmail.com")
                    .address(new Address( "LA","1가" ))
                    .nickname("김구글")
                    .build();
            }
        else {
            // 이미 존재하는 값이면 지우고 새로 추가
            User existUser = user;

            data.removeIf(item -> Objects.equals(item.getId(), existUser.getId()));
        }
        data.add(user);
        return user;
    }
}